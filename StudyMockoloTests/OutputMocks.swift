///
/// @Generated by Mockolo
///



import Foundation
import RxCocoa
import RxSwift
@testable import StudyMockolo


class ViewModelTypeMock: ViewModelType {
    init() { }
    init(inputs: ViewModelInputs, outputs: ViewModelOutputs) {
        self._inputs = inputs
        self._outputs = outputs
    }

    var inputsSetCallCount = 0
    private var _inputs: ViewModelInputs!  { didSet { inputsSetCallCount += 1 } }
    var inputs: ViewModelInputs {
        get { return _inputs }
        set { _inputs = newValue }
    }

    var outputsSetCallCount = 0
    private var _outputs: ViewModelOutputs!  { didSet { outputsSetCallCount += 1 } }
    var outputs: ViewModelOutputs {
        get { return _outputs }
        set { _outputs = newValue }
    }
}

class UsersUseCaseMock: UsersUseCase {
    init() { }


    var fetchUsersCallCount = 0
    var fetchUsersHandler: (() -> (Observable<[User]>))?
    func fetchUsers() -> Observable<[User]> {
        fetchUsersCallCount += 1
        if let fetchUsersHandler = fetchUsersHandler {
            return fetchUsersHandler()
        }
        return Observable<[User]>.empty()
    }
}

class UserRepositoryMock: UserRepository {
    init() { }


    var fetchUsersCallCount = 0
    var fetchUsersHandler: (() -> (Observable<[User]>))?
    func fetchUsers() -> Observable<[User]> {
        fetchUsersCallCount += 1
        if let fetchUsersHandler = fetchUsersHandler {
            return fetchUsersHandler()
        }
        return Observable<[User]>.empty()
    }
}

